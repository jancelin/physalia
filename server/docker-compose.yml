#docker-compose build
#docker-compose up -d
version: "3.3"
volumes:
  postgis:
  grafana:
services:
#Database-------------------------------------------------------------
  postgis:
    image: kartoza/postgis:13-3.1
    container_name: postgis
    restart: always
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASS
      - POSTGRES_DBNAME
      - ALLOW_IP_RANGE=0.0.0.0/0
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology
      - REPLICATION_USER=replicator
      - REPLICATION_PASS=replicator
    restart: on-failure
    volumes:
      - postgis:/var/lib/postgresql
      - ./postgis/setup-db.sql:/docker-entrypoint-initdb.d/setup-db.sql #au premier démarrage la base, via le script .sql, est construite
      - ./postgis:/srv #Pour l'accessibilité des sauvegardes

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: on-failure
    ports:
      - 5051:80
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
#    volumes:
#      - ./postgis:/var/lib/pgadmin/storage/buoy_physalia.fr

#Dashboard-------------------------------------------------------------
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: on-failure
    depends_on:
      - postgis # indique que le service base de donnée est nécessaire
    links:
      - postgis:postgis
    ports:
      - 3000:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-image-renderer
      - GF_SECURITY_ADMIN_USER
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
  renderer:
    image: grafana/grafana-image-renderer:latest
    ports:
      - 8081
    environment:
      ENABLE_METRICS: 'true'

# Service de réception/stockage des données des bouées-----------------
  tracking:
    build: ./tracking
    container_name: tracking
    restart: on-failure
    depends_on:
      - postgis  # indique que le service base de donnée est nécessaire
    links:
      - postgis:postgis
    ports:
      - 8090:8090
    environment:
      - HOST
      - PORT
      - POSTGRES_DBNAME
      - POSTGRES_USER
      - POSTGRES_PASS
      - TBL
